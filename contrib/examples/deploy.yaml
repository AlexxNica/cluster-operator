apiVersion: v1
kind: Template
metadata:
  name: boatswain-deploy-template
  namespace: ${BOATSWAIN_NAMESPACE}
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: boatswain-apiserver
    namespace: ${BOATSWAIN_NAMESPACE}

# API-server service-account gets its own role
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "boatswain.openshift.io:apiserver"
    namespace: ${BOATSWAIN_NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "boatswain.openshift.io:apiserver"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: boatswain-apiserver
    namespace: ${BOATSWAIN_NAMESPACE}

# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "boatswain.openshift.io:apiserver-auth-delegator"
    namespace: ${BOATSWAIN_NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: boatswain-apiserver
    namespace: ${BOATSWAIN_NAMESPACE}

# apiserver gets the ability to read authentication. This allows it to
# read the specific configmap that has the requestheader-* entries to
# enable api aggregation
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: "boatswain.openshift.io:apiserver-authentication-reader"
    namespace: ${KUBE_SYSTEM_NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: extension-apiserver-authentication-reader
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: boatswain-apiserver
    namespace: ${BOATSWAIN_NAMESPACE}

- apiVersion: v1
  kind: Secret
  metadata:
    name: boatswain-apiserver-cert
    namespace: ${BOATSWAIN_NAMESPACE}
    labels:
      app: boatswain-apiserver
  type: Opaque
  data:
    tls.crt: ${SERVING_CERT}
    tls.key: ${SERVING_KEY}

- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: boatswain-apiserver
    name: boatswain-apiserver
    namespace: ${BOATSWAIN_NAMESPACE}
  spec:
    selector:
      matchLabels:
        app: boatswain-apiserver
    template:
      metadata:
        labels:
          app: boatswain-apiserver
      spec:
        serviceAccountName: boatswain-apiserver
        containers:
        - name: apiserver
          args:
          - apiserver
          - --secure-port
          - "6443"
          - --etcd-servers
          - http://localhost:2379
###          - --etcd-cafile
###          - {{ etcd_cafile }}
###          - --etcd-certfile
###          - /etc/origin/master/master.etcd-client.crt
###          - --etcd-keyfile
###          - /etc/origin/master/master.etcd-client.key
          - -v
          - "10"
###          - --cors-allowed-origins
###          - {{ cors_allowed_origin }}
###          - --admission-control
###          - KubernetesNamespaceLifecycle,DefaultServicePlan,ServiceBindingsLifecycle,ServicePlanChangeValidator,BrokerAuthSarCheck
###          - --feature-gates
###          - OriginatingIdentity=true
          image: boatswain:canary
          command: ["/opt/services/boatswain"]
          imagePullPolicy: Never
          name: apiserver
          ports:
          - containerPort: 6443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/run/openshift-boatswain
            name: apiserver-ssl
            readOnly: true
###          - mountPath: /etc/origin/master
###            name: etcd-host-cert
###            readOnly: true
          readinessProbe:
            httpGet:
              port: 6443
              path: /healthz
              scheme: HTTPS
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              port: 6443
              path: /healthz
              scheme: HTTPS
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
        - name: etcd
          image: quay.io/coreos/etcd:latest
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 20Mi
            limits:
              cpu: 100m
              memory: 30Mi
          env:
          - name: ETCD_DATA_DIR
            value: /etcd-data-dir
          command:
          - /usr/local/bin/etcd
          - --listen-client-urls
          - http://0.0.0.0:2379
          - --advertise-client-urls
          - http://localhost:2379
          ports:
          - containerPort: 2379
          volumeMounts:
          - name: etcd-data-dir
            mountPath: /etcd-data-dir
          readinessProbe:
            httpGet:
              port: 2379
              path: /health
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              port: 2379
              path: /health
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: apiserver-ssl
          secret:
            defaultMode: 420
            secretName: boatswain-apiserver-cert
            items:
            - key: tls.crt
              path: apiserver.crt
            - key: tls.key
              path: apiserver.key
###        - hostPath:
###            path: /etc/origin/master
###          name: etcd-host-cert
        - emptyDir: {}
          name: etcd-data-dir

- kind: Service
  apiVersion: v1
  metadata:
    name: boatswain-apiserver
    namespace: ${BOATSWAIN_NAMESPACE}
    labels:
      app: boatswain-apiserver
  spec:
    type: NodePort
    selector:
      app: boatswain-apiserver
    ports:
    - name: secure
      protocol: TCP
      port: 443
      targetPort: 6443
      nodePort: 30443

- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1alpha1.boatswain.openshift.io
    namespace: ${KUBE_SYSTEM_NAMESPACE}
  spec:
    group: boatswain.openshift.io
    version: v1alpha1
    service:
      namespace: ${BOATSWAIN_NAMESPACE}
      name: boatswain-apiserver
    caBundle: ${SERVING_CA} 
    groupPriorityMinimum: 10000 
    versionPriority: 20

parameters:
- name: BOATSWAIN_NAMESPACE
  value: boatswain
- name: KUBE_SYSTEM_NAMESPACE
  value: kube-system
- name: SERVING_CA
- name: SERVING_CERT
- name: SERVING_KEY
